#include <iostream>
#include <vector>
#include <string>
using namespace std;

// Book class definition
class Book {
public:
    string ISBN;
    string title;
    string author;
    string genre;
    int publish_date;

    Book(string a, string b, string c, int d, string e) /*Constructor*/ {

        ISBN = a;   //This assigns the value of the parameter a      
        title = b;  //(which is passed when creating a Book object) to the member variable ISBN of the Book object
        author = c;
        publish_date = d;
        genre = e;

    }

    // Display book details
// Display book details
    void Display() {
        cout << endl << "********************************" << endl;
        cout << "ISBN: " << ISBN << endl;
        cout << "Title: " << title << endl;
        cout << "Author: " << author << endl;
        cout << "Publish date: " << publish_date << endl;
        cout << "Genre: " << genre <<endl;
        cout << "********************************" << endl;

    }
};

// Function to add a book

void AddBook(vector<Book>& books) {

    string ISBN, title, author, genre;
    int publish_date;

    cout << "Enter ISBN: ";
    cin >> ISBN;
    cin.ignore();
    cout << "Enter Title: ";
    getline(cin, title);
    cout << "Enter Author Name: ";
    getline(cin, author);
    cout << "Enter Publication date: ";
    cin >> publish_date;
    cin.ignore();
    cout << "Enter Genre: ";
    getline(cin, genre);

    cout << "Book added successfully!" << endl;
    Book book = Book(ISBN, title, author, publish_date, genre);
    books.push_back(book);
    book.Display();

}

// Function to remove a book by ISBN

void RemoveBook(vector<Book>& books) {
    cout << "your inside remove func " << endl;
    string ISBN, title;

    if (books.empty()) {
        cout << "No books available in the library." << endl;
    }
    else {
        for (auto i = books.begin(); i != books.end(); ++i) {
            cout << "Enter ISBN:" << endl;
            cin >> ISBN;
            if (i->ISBN == ISBN) {
                books.erase(i);
                cout << "Book removed successfully!" << endl;
                return;
            }
        }
    }

}
// Function to edit book by  ISBN

void EditBook(vector<Book>& books) {
    string ISBN, title, author, genre;
    int publish_date;
    cout << "Enter ISBN of the book to edit: ";
    cin >> ISBN;
    cin.ignore(); 

    for (auto i = books.begin(); i != books.end(); ++i) {
        if (i->ISBN == ISBN) {
            // Prompt for new details
            cout << "Enter the new title of the book: ";
            getline(cin, title);
            cout << "Enter the new author of the book: ";
            getline(cin, author);
            cout << "Enter the new publish date of the book: ";
            cin >> publish_date;
            cin.ignore(); // Clear the input buffer
            cout << "Enter the new genre of the book: ";
            getline(cin, genre);

            // Update the existing book details
            i->title = title;
            i->author = author;
            i->publish_date = publish_date;
            i->genre = genre;

            cout << "Book edited successfully!" << endl;
            return; // Exit after updating the book
        }
    }

    // If the book is not found
    cout << "Book with ISBN " << ISBN << " not found!" << endl;
}

///////////////////////////////////////////////
///////////////////////////////////////////////
// Function to display all books in the library
///////////////////////////////////////////////
///////////////////////////////////////////////

void DisplayAllBooks(vector<Book>& books) {
    if (books.empty()) {
        cout << "No books available in the library." << endl;
    }
    else {
        for (int i = 0; i < books.size(); ++i) {
            books[i].Display();  // Display each book
        }
    }
}


///////////////////////////////////
///////////////////////////////////
// Function do search book by genre
///////////////////////////////////
///////////////////////////////////

void SearchByGenre(vector<Book>& books) {
    string uGenre;
    if (books.empty()) {
        cout << "No books available in the library." << endl;
    }
      else
     {
        cout << "Enter genre: ";
        cin >> uGenre;
        
        for (int i = 0; i < books.size(); ++i) {
            if (books[i].genre == uGenre) {books[i].Display();}
        }
        
    }
}


int main() {
    vector<Book> books; // books is the name of the vector that stores all of our books
    int choice;
    string userPass;

    while (true) {
        cout << "Enter The Passcode: ";
        cin >>  userPass;

        if ( userPass == "12345") {
            cout << "Access Granted!." << endl;
            break;
        }
        else {
            cout << "Incorrect passcode. Please try again." << endl;
        }
    }
    while (true) {
        cout << "********************************" << endl;
        cout << "******NJUPT Library System******" << endl;
        cout << "*********************************" << endl;
        cout << "1. Add Book" << endl;
        cout << "2. Remove Book" << endl;
        cout << "3. Edit Book" << endl;
        cout << "4. View All Books" << endl;
        cout << "5. Search Book By Genre" << endl;
        cout << "Choose an option: ";
        cin >> choice;

        switch (choice) {
        case 1: AddBook(books);
            break;
        case 2: RemoveBook(books);
            break;
        case 3: EditBook(books);
            break;
        case 4: DisplayAllBooks(books);
            break;
        case 5: SearchByGenre(books);
            break;
        default:
            cout << "Invalid choice. Try again." << endl;
        }
    }
    return 0;
}
